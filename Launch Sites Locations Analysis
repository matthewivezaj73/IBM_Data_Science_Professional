#Importing libraries 
import folium
import wget
import pandas as pd
import numpy as np

# Import folium plugins.
from folium.plugins import MarkerCluster
from folium.plugins import MousePosition
from folium.features import DivIcon

# Download and read `spacex_launch_geo.csv`.
spacex_csv_file = wget.download('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv')
spacex_df=pd.read_csv(spacex_csv_file)

# Select relevant columns.
spacex_df = spacex_df[['Launch Site', 'Lat', 'Long', 'class']]
launch_sites_df = spacex_df.groupby(['Launch Site'], as_index=False).first()
launch_sites_df = launch_sites_df[['Launch Site', 'Lat', 'Long']]
launch_sites_df

nasa_coordinate = [29.559684888503615, -100]
site_map = folium.Map(location=nasa_coordinate, zoom_start=4.5)

# Create a blue circle at NASA Johnson Space Center's coordinate with a popup label showing its name
circle = folium.Circle(nasa_coordinate, radius=10, color='#0000FF', fill=True).add_child(folium.Popup('NASA Johnson Space Center'))
marker = folium.map.Marker(
    nasa_coordinate,
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#000000;"><b>%s</b></div>' % 'NASA JSC',
        )
    )
#Creating markers.
site_map.add_child(circle)
site_map.add_child(marker)

folium.Circle(nasa_coordinate, radius=1000, color='#000000', fill=True).add_child(folium.Popup(...))

folium.map.Marker(nasa_coordinate, icon=DivIcon(icon_size=(20,20),icon_anchor=(0,0), html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'label', ))

col = launch_sites_df.columns

# save coordinates in lists
sites = [v for k,v in launch_sites_df[col[0]].items()]
lat = [v for k,v in launch_sites_df[col[1]].items()]
long = [v for k,v in launch_sites_df[col[2]].items()]
circles = []

#Looping through each site and creating circle/marker objects and adding them to the site map.
for i in range(len(sites)):
    coordinate = [lat[i], long[i]]
    circle = folium.Circle(coordinate, radius=100, color='#000000', fill=True).add_child(folium.Popup(f'{sites[i]}'))
    marker = folium.map.Marker(coordinate, icon=DivIcon(icon_size=(20,20),icon_anchor=(0,0), 
                                               html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % f'{sites[i]}', ))
    site_map.add_child(circle)
    site_map.add_child(marker)
#Displaying the results.
site_map

#Displaying the last 10 values.
spacex_df.tail(10)

marker_cluster = MarkerCluster()

#Creating a function to assign the marker color.
def assign_marker_color(launch_outcome):
    """
        Assigning the marker color.
    """
    if launch_outcome == 1:
        return 'green'
    else:
        return 'red'
        
spacex_df['marker_color'] = spacex_df['class'].apply(assign_marker_color)
spacex_df.tail(10)


# Add marker_cluster to map.
site_map.add_child(marker_cluster)

for index, record in spacex_df.iterrows():
    
    label = record[0]
    lat = record[1]
    long = record[2]
    row_color = record[4]
    marker = folium.Marker(
        location = [lat, long],
        icon=folium.Icon(color='white', icon_color=row_color)
    )
    marker_cluster.add_child(marker)

site_map.fit_bounds([[28.60577, -80.68102], [28.52813, -80.52168]]) # Insert resting coordinates for map
site_map

#Adding a mouse position.
formatter = "function(num) {return L.Util.formatNum(num, 5);};"
mouse_position = MousePosition(
    position='topright',
    separator=' Long: ',
    empty_string='NaN',
    lng_first=False,
    num_digits=20,
    prefix='Lat:',
    lat_formatter=formatter,
    lng_formatter=formatter,
)
#Adding bounds/child and displaying the result.
site_map.add_child(mouse_position)
site_map.fit_bounds([[42.81152, -130.3418], [13.32548, -64.33594]])
site_map


from math import sin, cos, sqrt, atan2, radians

def calculate_distance(lat1, lon1, lat2, lon2):
    # approximate radius of earth in km
    R = 6373.0

    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance
    
    
    # finding the coordinate of the closet coastline

coastline_distances = []

lat = [v for k,v in launch_sites_df[col[1]].items()]
long = [v for k,v in launch_sites_df[col[2]].items()]

coast_lat = [28.56225, 28.56334, 28.57339, 34.63284]
coast_long = [-80.5678, -80.56797, -80.60693, -120.62634]


for i in range(len(coast_long)):
    coastline_distances.append(calculate_distance(lat[i], long[i], coast_lat[i], coast_long[i]))
    
    
for i in range(len(coast_long)):
    # nearest coastline coordinates
    coordinate = [coast_lat[i], coast_long[i]]           
    distance_marker = folium.Marker(
       coordinate,
       icon=DivIcon(
           icon_size=(20,20),
           icon_anchor=(0,0),
           html='<div style="font-size: 12; color:#000080;"><b>%s</b></div>' % "{:10.2f} KM".format(coastline_distances[i]),
           )
       )
    site_map.add_child(distance_marker)


for i in range(len(lat)):

    # coordinate
    coordinates = [[lat[i], long[i]], [coast_lat[i], coast_long[i]]]

    lines=folium.PolyLine(coordinates, weight=0.5)
    site_map.add_child(lines)

site_map.fit_bounds([[28.56798, -80.58229], [28.55791, -80.56224]])
site_map

# enter coordinates
locations = []
locs_distances = []

railway_lat = [28.57211, 28.57211, 28.57307, 34.6338]
railway_long = [-80.58527, -80.58527, -80.65403, -120.62478]

highway_lat = [28.56278, 28.56278, 28.57359, 34.70472]
highway_long = [-80.57075, -80.57075, -80.6553, -120.56937]

city_lat = [28.39804, 28.39804, 28.60984, 34.63716]
city_long = [-80.60257, -80.60257, -80.80376, -120.45616]

for i in range(len(city_lat)):
    
    # save coordinates in a list object
    locs = [railway_lat[i], railway_long[i], '#BA55D3'], [highway_lat[i], highway_long[i], '#2E8B57'], [city_lat[i], city_long[i], '#DC143C']
    locations.append([locs])
    
    # save distances(km) in another list
    dist = [(calculate_distance(lat[i], long[i], railway_lat[i], railway_long[i])), 
    (calculate_distance(lat[i], long[i], highway_lat[i], highway_long[i])),
    (calculate_distance(lat[i], long[i], city_lat[i], city_long[i]))]
    
    locs_distances.append(dist)
    
#Looping through the locations to gather site coordinates and loctions.
for i in range(len(locations)):
    site = locations[i]
    site_coordinates = [lat[i], long[i]]
    
    # loop through location to create the items distance and nearest coordinates.
    for i in range(len(site)):
        coordinates = site[i]
        distances = locs_distances[i]
        
        # loop through each distance to create the individual coordinate and distance.
        for i in range(len(distances)):
            coordinate = coordinates[i][:2]
            distance = distances[i]
            
            # Creating a marker object.            
            distance_marker = folium.Marker(
               coordinate,
               icon=DivIcon(
                   icon_size=(20,20),
                   icon_anchor=(0,0),
                   html=f'<div style="font-size: 5; color:{coordinates[i][2]};"><b>%s</b></div>' % "{:10.2f} KM".format(distance),
                   )
               )

            
            # Drawing a line.
            new_coordinates = [site_coordinates, coordinate]

            line = folium.PolyLine(new_coordinates, weight=0.5)

            site_map.add_child(line)
            site_map.add_child(distance_marker)
            
#Fitting te map and displaying it.
site_map.fit_bounds([[34.64242, -120.63443], [34.6229, -120.59301]])
site_map
